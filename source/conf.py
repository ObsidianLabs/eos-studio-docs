# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = u'EOS Studio Docs'
copyright = u'2019, Obsidian Labs'
author = u'Phil Li'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.

needs_sphinx = '2.1'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.githubpages',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.linkcode',
    'recommonmark',
    'sphinx_fontawesome'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

html_theme = 'sphinx_rtd_theme'
# html_theme = 'sphinxdoc'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

html_theme_options = {
  'canonical_url': 'https://docs.eosstudio.io',
  'style_external_links': False
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_css_files = [
  'css/custom.css',
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'EOSStudioDocsdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'EOSStudioDocs.tex', u'EOS Studio Documentation',
     u'Phil Li', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'eosstudiodocs', u'EOS Studio Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'EOSStudioDocs', u'EOS Studio Documentation',
     author, 'EOSStudioDocs', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
todo_emit_warnings = True


def linkcode_resolve(domain, info):
    if domain != 'cpp':
        return None

    if not info['names']:
        return None

    names = info['names'][0].split('::')
    if names[0] == 'eosio':
        return linkcode_resolve_eosio(names)
    elif names[0] == 'token':
        return linkcode_resolve_eosio_token(names)
    elif names[0] == 'dgoods':
        return linkcode_resolve_dgoods(names)
    elif names[0] == 'forum':
        return linkcode_resolve_forum(names)
    else:
        return None

def linkcode_resolve_eosio(names):
    if (len(names) > 2):
        return None
    
    github = "https://github.com/EOSIO/eosio.cdt/blob/v1.6.2/libraries"

    if names[1] == 'name':
        return "%s/eosiolib/core/eosio/name.hpp#L35" % github
    elif names[1] == 'symbol_code':
        return "%s/eosiolib/core/eosio/symbol.hpp#L29" % github
    elif names[1] == 'symbol':
        return "%s/eosiolib/core/eosio/symbol.hpp#L239" % github
    elif names[1] == 'extended_symbol':
        return "%s/eosiolib/core/eosio/symbol.hpp#L377" % github
    elif names[1] == 'asset':
        return "%s/eosiolib/core/eosio/asset.hpp#L23" % github
    elif names[1] == 'microseconds':
        return "%s/eosiolib/core/eosio/time.hpp#L15" % github
    elif names[1] == 'milliseconds':
        return "%s/eosiolib/core/eosio/time.hpp#L44" % github
    elif names[1] == 'seconds':
        return "%s/eosiolib/core/eosio/time.hpp#L43" % github
    elif names[1] == 'minutes':
        return "%s/eosiolib/core/eosio/time.hpp#L45" % github
    elif names[1] == 'hours':
        return "%s/eosiolib/core/eosio/time.hpp#L46" % github
    elif names[1] == 'days':
        return "%s/eosiolib/core/eosio/time.hpp#L47" % github
    elif names[1] == 'time_point':
        return "%s/eosiolib/core/eosio/time.hpp#L54" % github
    elif names[1] == 'time_point_sec':
        return "%s/eosiolib/core/eosio/time.hpp#L84" % github
    elif names[1] == 'block_timestamp':
        return "%s/eosiolib/core/eosio/time.hpp#L141" % github
    else:
        return None


def linkcode_resolve_eosio_token(names):
    if (len(names) != 2):
        return None
    
    github = "https://github.com/EOSIO/eosio.contracts/tree/release/1.7.x/contracts/eosio.token"

    if names[1] == 'create':
        return "%s/src/eosio.token.cpp#L5" % github
    elif names[1] == 'issue':
        return "%s/src/eosio.token.cpp#L27" % github
    elif names[1] == 'transfer':
        return "%s/src/eosio.token.cpp#L77" % github
    elif names[1] == 'open':
        return "%s/src/eosio.token.cpp#L129" % github
    elif names[1] == 'close':
        return "%s/src/eosio.token.cpp#L149" % github
    elif names[1] == 'retire':
        return "%s/src/eosio.token.cpp#L53" % github

    elif names[1] == 'stat':
        return "%s/include/eosio.token/eosio.token.hpp#L163" % github
    elif names[1] == 'accounts':
        return "%s/include/eosio.token/eosio.token.hpp#L157" % github
    else:
        return None


def linkcode_resolve_dgoods(names):
    if (len(names) != 2):
        return None
    
    github = "https://github.com/MythicalGames/dgoods/blob/v1.0"
    # print names

    if names[1] == 'setconfig':
        return "%s/src/dgoods.cpp#L4" % github
    elif names[1] == 'create':
        return "%s/src/dgoods.cpp#L19" % github
    elif names[1] == 'issue':
        return "%s/src/dgoods.cpp#L88" % github
    elif names[1] == 'burnnft':
        return "%s/src/dgoods.cpp#L137" % github
    elif names[1] == 'burnft':
        return "%s/src/dgoods.cpp#L172" % github
    elif names[1] == 'transfernft':
        return "%s/src/dgoods.cpp#L196" % github
    elif names[1] == 'transferft':
        return "%s/src/dgoods.cpp#L215" % github
    elif names[1] == 'listsalenft':
        return "%s/src/dgoods.cpp#247" % github
    elif names[1] == 'closesalenft':
        return "%s/src/dgoods.cpp#L289" % github

    elif names[1] == 'tokenconfigs':
        return "%s/include/dgoods.hpp#L97" % github
    elif names[1] == 'dgoodstats':
        return "%s/include/dgoods.hpp#L112" % github
    elif names[1] == 'categoryinfo':
        return "%s/include/dgoods.hpp#L104" % github
    elif names[1] == 'dgood':
        return "%s/include/dgoods.hpp#L131" % github
    elif names[1] == 'accounts':
        return "%s/include/dgoods.hpp#L147" % github
    elif names[1] == 'lockednfts':
        return "%s/include/dgoods.hpp#L78" % github
    elif names[1] == 'asks':
        return "%s/include/dgoods.hpp#L86" % github

    else:
        return None



def linkcode_resolve_forum(names):
    if (len(names) != 2):
        return None
    
    github = "https://github.com/eoscanada/eosio.forum/tree/master"
    # print names

    if names[1] == 'propose':
        return "%s/src/forum.cpp#L11" % github
    elif names[1] == 'expire':
        return "%s/src/forum.cpp#L43" % github
    elif names[1] == 'clnproposal':
        return "%s/src/forum.cpp#L111" % github
    elif names[1] == 'vote':
        return "%s/src/forum.cpp#L58" % github
    elif names[1] == 'unvote':
        return "%s/src/forum.cpp#L80" % github
    elif names[1] == 'post':
        return "%s/src/forum.cpp#L139" % github
    elif names[1] == 'unpost':
        return "%s/src/forum.cpp#L167" % github
    elif names[1] == 'status':
        return "%s/src/forum.cpp#L174" % github

    elif names[1] == 'proposals':
        return "%s/include/forum.hpp#L87" % github
    elif names[1] == 'vote':
        return "%s/include/forum.hpp#L106" % github
    elif names[1] == 'status':
        return "%s/include/forum.hpp#L124" % github

    else:
        return None

